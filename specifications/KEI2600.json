{
  "name": "KEI2600",
  "devicetype": "SMU",
  "superclass": "KeithleyDevice",
  "imports": "import requests\nfrom py_instrument_control_lib.device_base.DeviceException import DeviceException\nimport time\nimport copy\nfrom typing import Optional",
  "commands": [
    {
      "name": "execute",
      "type": "code",
      "signature": "command: str",
      "code": "if hasattr(self, '_buffering_enabled') and self._buffering_enabled:\n    self._buffered_script.append(command)\nelse:\n    super().execute(command)"
    },
    {
      "name": "query",
      "type": "code",
      "signature": "query: str",
      "return": "Optional[str]",
      "code": "if hasattr(self, '_buffering_enabled') and self._buffering_enabled:\n    buffer_name = 'A_M_BUFFER' if query.startswith('smua') else 'B_M_BUFFER'\n    query = query[:-1] + buffer_name + ')'\n    self._buffered_script.append(query)\n    return \"inf\"\nelse:\n    command = 'reading = ' + query\n    self.execute(command)\n    self.execute('print(reading)')\n    response = self._socket.recv(1024)\n    response_decoded = response.decode()\n    if 'TSP>' in response_decoded:\n        raise DeviceException(msg='Do not use the web interface before or during use of this control lib! '\n                                  'You have to restart your device in order to continue.')\n    return response_decoded"
    },
    {
      "name": "measure",
      "docs": "This function measures a certain unit on a specific channel. Can be used to measure voltage, current, power or resistance.\n:param unit: The thing to measure.\n:param channel_idx: The channel to measure on.\n:param check_errors: Whether to check the error buffer after the execution.\n:return: None.",
      "type": "generated",
      "signature": "unit: ChannelUnit, channel_idx: ChannelIndex",
      "return": "float",
      "command": "f'{self.__to_channel(channel_idx)}.measure.{unit.value}()'"
    },
    {
      "name": "__to_channel",
      "type": "code",
      "signature": "channel_idx: ChannelIndex",
      "return": "str",
      "code": "channel_idx.check(2)\nreturn 'smua' if channel_idx.get() == 1 else 'smub'"
    },
    {
      "name": "toggle_channel",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, enable: bool",
      "command": "f'{self.__to_channel(channel_idx)}.source.output = {self.__to_channel(channel_idx)}.OUTPUT_{(\"ON\" if enable else \"OFF\")}'"
    },
    {
      "name": "set_level",
      "type": "generated",
      "signature": "unit: ChannelUnit, channel_idx: ChannelIndex, level: float",
      "requirements": "unit in (ChannelUnit.VOLTAGE, ChannelUnit.CURRENT)",
      "command": "f'{self.__to_channel(channel_idx)}.source.level{unit.value} = {level}'"
    },
    {
      "name": "set_limit",
      "type": "generated",
      "signature": "unit: ChannelUnit, channel_idx: ChannelIndex, limit: float",
      "requirements": "unit in (ChannelUnit.VOLTAGE, ChannelUnit.CURRENT, ChannelUnit.POWER)",
      "command": "f'{self.__to_channel(channel_idx)}.source.limit{unit.value} = {str(limit)}'"
    },
    {
      "name": "toggle_autorange",
      "type": "generated",
      "signature": "unit: ChannelUnit, channel_idx: ChannelIndex, mode: SMUMode, enable: bool",
      "requirements": "unit in (ChannelUnit.VOLTAGE, ChannelUnit.CURRENT)",
      "command": "f'{self.__to_channel(channel_idx)}.{mode.value}.autorange{unit.value} = {int(enable) if mode == SMUMode.MEASURE else self.__to_channel(channel_idx) + \".AUTORANGE_\" + (\"ON\" if enable else \"OFF\")}'"
    },
    {
      "name": "toggle_measure_analog_filter",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, enable: bool",
      "command": "f'{self.__to_channel(channel_idx)}.measure.analogfilter = {int(enable)}'"
    },
    {
      "name": "set_range",
      "type": "generated",
      "signature": "unit: ChannelUnit, channel_idx: ChannelIndex, mode: SMUMode, range_: float",
      "requirements": "unit in (ChannelUnit.VOLTAGE, ChannelUnit.CURRENT)",
      "command": "f'{self.__to_channel(channel_idx)}.{mode.value}.range{unit.value} = {range_}'"
    },
    {
      "name": "set_sense_mode",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, sense_arg: SMUSense",
      "command": "f'{self.__to_channel(channel_idx)}.sense = {self.__to_channel(channel_idx)}.{sense_arg.value}'"
    },
    {
      "name": "set_measure_plc",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, value: float",
      "requirements": "0.001 < value < 25",
      "command": "f'{self.__to_channel(channel_idx)}.measure.nplc = {value}'"
    },
    {
      "name": "set_measure_low_range",
      "type": "generated",
      "signature": "unit: ChannelUnit, channel_idx: ChannelIndex, value: float",
      "requirements": "unit in (ChannelUnit.VOLTAGE, ChannelUnit.CURRENT)",
      "command": "f'{self.__to_channel(channel_idx)}.measure.lowrange{unit.value} = {value}'"
    },
    {
      "name": "set_measure_auto_zero",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, auto_zero: Autozero",
      "command": "f'{self.__to_channel(channel_idx)}.measure.autozero = {self.__to_channel(channel_idx)}.{auto_zero.value}'"
    },
    {
      "name": "set_measure_count",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, nr_of_measurements: int",
      "command": "f'{self.__to_channel(channel_idx)}.measure.count = {nr_of_measurements}'"
    },
    {
      "name": "set_source_function",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, src_func: SourceFunction",
      "command": "f'{self.__to_channel(channel_idx)}.source.func = {self.__to_channel(channel_idx)}.{src_func.value}'"
    },
    {
      "name": "set_source_off_mode",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, src_off_mode: SourceOffMode",
      "command": "f'{self.__to_channel(channel_idx)}.source.offmode = {self.__to_channel(channel_idx)}.{src_off_mode.value}'"
    },
    {
      "name": "set_source_settling",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, src_settling: SourceSettling",
      "command": "f'{self.__to_channel(channel_idx)}.source.settling = {self.__to_channel(channel_idx)}.{src_settling.value}'"
    },
    {
      "name": "toggle_source_sink",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, enable: bool",
      "command": "f'{self.__to_channel(channel_idx)}.source.sink = {str(int(enable))}'"
    },
    {
      "name": "display_measure_function",
      "type": "generated",
      "signature": "channel_idx: ChannelIndex, diplay_measure_func: SMUDisplay",
      "command": "f'display.{self.__to_channel(channel_idx)}.measure.func = display.{diplay_measure_func.value}'"
    },
    {
      "name": "toggle_beep",
      "type": "generated",
      "signature": "enable: bool",
      "command": "f'beeper.enable = beeper.{\"ON\" if enable else \"OFF\"}'"
    },
    {
      "name": "beep",
      "type": "generated",
      "docs": "Send a beeping sound with a specific duration and frequency to the SMU.\n:param duration: Time in seconds to play the beeping sound.\n:param frequency: Frequency in HZ of the sound to play.\n:param check_errors: Whether to check the error buffer after the execution.\n:return: None.",
      "signature": "duration: float, frequency: int",
      "command": "f'beeper.beep({duration}, {frequency})'"
    },
    {
      "name": "toggle_buffering",
      "type": "code",
      "signature": "enable: bool",
      "code": "self._buffering_enabled = enable\nif not hasattr(self, '_buffered_script'):\n    self._buffered_script = []"
    },
    {
      "name": "execute_buffered_script",
      "type": "code",
      "signature": "blocking: bool = True, script_name: str = 'BufferedScript'",
      "code": "for buffer in ('A_M_BUFFER', 'B_M_BUFFER'):\n    buffer_entries = len([line for line in self._buffered_script if buffer in line])\n    self._buffered_script.insert(0, f'{buffer} = smu{buffer[0].lower()}.makebuffer({buffer_entries})')\n    self._buffered_script.insert(1, f'{buffer}.appendmode = 1')\nself.send_execute_script(self._buffered_script, script_name, blocking)\nself._buffer = None"
    },
    {
      "name": "send_script",
      "type": "code",
      "signature": "script: list[str] | str, script_name: str",
      "code": "if isinstance(script, str):\n    script = script.split('\\n')\nscript = [f'loadscript {script_name}', *script, 'endscript']\n\nchunk_size = 32\nchunks = [script[i:i + chunk_size] for i in range(0, len(script), chunk_size)]\nexit_payload: dict = {'command': 'keyInput', 'value': 'K'}\npayloads: list[dict] = [exit_payload,\n                        *[self.__make_payload('\\n'.join(chunk)) for chunk in chunks],\n                        self.__make_payload(f'{script_name}.save()'),\n                        exit_payload]\n\nfor payload in payloads:\n    response = requests.post('http://' + self._config.ip + '/HttpCommand', json=payload)\n    if response.status_code != 200:\n        raise DeviceException(msg='Failed to send and execute buffered script')\n    time.sleep(0.5)"
    },
    {
      "name": "execute_script",
      "type": "code",
      "signature": "script_name: str, blocking: bool = True",
      "code": "buffering_enabled = hasattr(self, '_buffering_enabled') and self._buffering_enabled\nself.toggle_buffering(False)\nself.execute(f'{script_name}()')\nself.toggle_buffering(buffering_enabled)\n\nif blocking:\n    time.sleep(2)\n    poll_payload = {\"command\": \"shellOutput\", \"timeout\": 3, \"acceptsMultiple\": True}\n    print('Waiting for script to complete')\n    status = requests.post('http://' + self._config.ip + '/HttpCommand', json=poll_payload)\n    while status.json()['status']['value'] == 'timeout':\n        status = requests.post('http://' + self._config.ip + '/HttpCommand', json=poll_payload)\n    print('Script finished')"
    },
    {
      "name": "send_execute_script",
      "type": "code",
      "signature": "script: list[str] | str, script_name: str, blocking: bool = True",
      "code": "self.send_script(script, script_name)\nself.execute_script(script_name, blocking)"
    },
    {
      "name": "__make_payload",
      "type": "code",
      "return": "dict",
      "signature": "value: str",
      "code": "return {'command': 'shellInput', 'value': value}"
    },
    {
      "name": "read_channel_buffers",
      "type": "code",
      "signature": "script: list[str] = None",
      "return": "list[list[str]]",
      "code": "if script is None:\n    script = self._buffered_script\nbuffering_enabled = hasattr(self, '_buffering_enabled') and self._buffering_enabled\nself.toggle_buffering(False)\nself._buffer = [self.read_channel_buffer(script, ChannelIndex(1)), self.read_channel_buffer(script, ChannelIndex(2))]\nself.toggle_buffering(buffering_enabled)\nreturn copy.deepcopy(self._buffer)"
    },
    {
      "name": "read_channel_buffer",
      "type": "code",
      "signature": "script: list[str], channel_idx: ChannelIndex",
      "return": "list[str]",
      "code": "channel_idx.check(2)\nbuffer_name = ('A' if channel_idx.get() == 1 else 'B') + '_M_BUFFER'\nbuffer_size = len([line for line in script if buffer_name in line]) - 2\nreturn self.read_buffer(buffer_name, buffer_size, check_errors)"
    },
    {
      "name": "read_buffer",
      "type": "code",
      "signature": "buffer_name: str, buffer_size: int",
      "return": "list[str]",
      "code": "batch_size = 1024 // 15\nbuffer = []\noffset = 1\nwhile offset + batch_size <= buffer_size:\n    buffer += self.__get_buffer_content(offset, batch_size, buffer_name)\n    offset += batch_size\nif (remaining := buffer_size % batch_size) > 0:\n    buffer += self.__get_buffer_content(offset, remaining, buffer_name)\n\nself.execute(f'{buffer_name}.clear()')\nreturn buffer"
    },
    {
      "name": "get_buffer",
      "type": "code",
      "signature": "",
      "return": "list[list[str]]",
      "code": "return copy.deepcopy(self._buffer) if hasattr(self, '_buffer') else None"
    },
    {
      "name": "__get_buffer_content",
      "type": "code",
      "signature": "offset: int, batch_size: int, buffer_name: str",
      "return": "list[str]",
      "code": "print_query = f'printbuffer({offset}, {offset + batch_size - 1}, {buffer_name})'\nself.execute(print_query)\nreturn self._socket.recv(1024).decode().replace('\\n', '').split(', ')"
    },
    {
      "name": "next_buffer_element",
      "type": "code",
      "signature": "channel_idx: ChannelIndex",
      "return": "float",
      "code": "channel_idx.check(2)\nif len(self._buffer) == 0:\n    raise Exception('Buffer is empty!')\nbuffer_idx = channel_idx.get() - 1\nreturn float(self._buffer[buffer_idx].pop(0))"
    },
    {
      "name": "set_channel_level",
      "type": "code",
      "signature": "unit: ChannelUnit, channel_idx: ChannelIndex, level: float",
      "return": "None",
      "code": "channel_idx.check(2)\nself.set_level(unit, channel_idx, level)"
    },
    {
      "name": "measure_channel",
      "type": "code",
      "signature": "unit: ChannelUnit, channel_idx: ChannelIndex",
      "return": "float",
      "code": "channel_idx.check(2)\nreturn self.measure(unit, channel_idx)"
    },
    {
      "name": "get_channel",
      "type": "code",
      "signature": "channel_idx: ChannelIndex",
      "return": "SourceMeasureChannel",
      "code": "return SourceMeasureChannel(self, channel_idx, [ChannelUnit.VOLTAGE, ChannelUnit.CURRENT], [ChannelUnit.VOLTAGE, ChannelUnit.CURRENT, ChannelUnit.POWER, ChannelUnit.RESISTANCE], True)"
    },
    {
      "name": "perform_linear_voltage_sweep",
      "type": "code",
      "signature": "channel_idx: ChannelIndex, start_voltage: float, stop_voltage: float, increase_rate: float, current: float, blocking: bool = True",
      "code": "precision = 1000\nfactor = 1 if start_voltage <= stop_voltage else -1\nscript = f'''channel = {self.__to_channel(channel_idx)}\nchannel.source.func = channel.OUTPUT_DCVOLTS\nchannel.source.output = channel.OUTPUT_ON\nchannel.source.limitv = {factor * stop_voltage} + 0.1\nchannel.source.limiti = {current} + 0.0001\nchannel.source.leveli = {current}\nfor current_voltage = {factor * start_voltage * precision}, {factor * stop_voltage * precision} do\n    channel.source.levelv = {factor} * current_voltage / {precision}\n    delay(1 / {increase_rate * precision})\n    end\nchannel.source.output = channel.OUTPUT_OFF'''\nself.send_execute_script(script, \"LinearVoltageSweep\", blocking)"
    }
  ]
}
